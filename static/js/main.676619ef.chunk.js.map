{"version":3,"sources":["serviceWorker.js","reducers.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Components/Header.js","Containers/App.js","actions.js","actionTypes.js","index.js"],"names":["Boolean","window","location","hostname","match","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","id","name","email","className","src","alt","CardList","console","log","map","user","i","key","SearchBox","searchChange","value","onChange","type","placeholder","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","info","this","setState","Component","MemoizedHeader","memo","title","prevProps","nextProps","connect","searchRobotsReducer","requestRobotsReducer","dispatch","onSearchChange","event","payload","target","onRequestRobots","fetch","then","response","json","data","catch","useEffect","filteredRobots","filter","robot","toLowerCase","includes","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.676619ef.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './actionTypes'\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobotsReducer = (\n  state = initialStateSearch,\n  action = {}\n) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload }\n    default:\n      return state\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobotsReducer = (\n  state = initialStateRobots,\n  action = {}\n) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true }\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false }\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false }\n    default:\n      return state\n  }\n}\n","import React from 'react'\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img src={`https://robohash.org/${id}?200x200}`} alt='robots' />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card\n","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n  console.log('CardList')\n  return (\n    <div>\n      {robots.map((user, i) => {\n        return (\n          <Card\n            key={robots[i].id}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n          />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default CardList\n","import React from 'react'\n\nconst SearchBox = ({ searchField, searchChange }) => {\n  console.log('SearchBox')\n\n  return (\n    <div className='pb4'>\n      <input\n        value={searchField}\n        onChange={searchChange}\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='Search Robot'\n      />\n    </div>\n  )\n}\n\nexport default SearchBox\n","import React from 'react'\n\nconst Scroll = props => {\n  return (\n    <div\n      style={{\n        overflowY: 'scroll',\n        border: '1px solid black',\n        height: '500px'\n      }}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll\n","import React, { Component } from 'react'\n\nclass ErrorBoundry extends Component {\n  state = {\n    hasError: false\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.hasError ? (\n          <h1>Ooooop. Something went wrong...</h1>\n        ) : (\n          this.props.children\n        )}\n      </>\n    )\n  }\n}\n\nexport default ErrorBoundry\n","import React, { memo } from 'react'\n\nconst Header = ({ title }) => {\n  console.log('Header')\n  return (\n    <h1 id='title' className='f1'>\n      {title}\n    </h1>\n  )\n}\n\nconst headerPropsAreEqual = (prevProps, nextProps) =>\n  prevProps.title === nextProps.title\n\nexport const MemoizedHeader = memo(Header, headerPropsAreEqual)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport CardList from '../Components/CardList'\nimport SearchBox from '../Components/SearchBox'\nimport Scroll from '../Components/Scroll'\nimport ErrorBoundry from '../Components/ErrorBoundry'\nimport { MemoizedHeader } from '../Components/Header'\n\nimport { setSearchField, requestRobots } from '../actions'\n\nconst App = ({\n  searchField,\n  onSearchChange,\n  robots,\n  isPending,\n  onRequestRobots\n}) => {\n  useEffect(() => {\n    onRequestRobots()\n  }, [onRequestRobots])\n\n  const filteredRobots = robots.filter(robot =>\n    robot.name.toLowerCase().includes(searchField.toLowerCase())\n  )\n\n  const title = isPending ? 'Loading...' : 'Robo Friends'\n\n  return (\n    <div className='tc'>\n      <MemoizedHeader title={title} />\n      <SearchBox searchChange={onSearchChange} />\n      <Scroll>\n        <ErrorBoundry>\n          <CardList robots={filteredRobots} />\n        </ErrorBoundry>\n      </Scroll>\n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobotsReducer.searchField,\n    robots: state.requestRobotsReducer.robots,\n    isPending: state.requestRobotsReducer.isPending,\n    error: state.requestRobotsReducer.error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './actionTypes'\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data =>\n      dispatch({\n        type: REQUEST_ROBOTS_SUCCESS,\n        payload: data\n      })\n    )\n    .catch(error =>\n      dispatch({\n        type: REQUEST_ROBOTS_FAILED,\n        payload: error\n      })\n    )\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport { Provider } from 'react-redux'\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport 'tachyons'\nimport { searchRobotsReducer, requestRobotsReducer } from './reducers'\nimport App from './Containers/App'\n\nconst logger = createLogger()\nconst rootReducer = combineReducers({\n  searchRobotsReducer,\n  requestRobotsReducer\n})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}